     1                                  bits 32
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit
     6                                  import exit msvcrt.dll    
     7                                  
     8                                  segment data use32 class=data
     9 00000000 0100                        a dw 1
    10 00000002 02                          b db 2
    11 00000003 0300                        c dw 3
    12 00000005 04000000                    d dd 4
    13 00000009 0500000000000000            x dq 5
    14 00000011 0000000000000000            r dq 0
    15                                  
    16                                  segment code use32 class=code
    17                                      start:
    18                                          ; (a*a+b/c-1)/(b+c)+d-x
    19 00000000 66A1[00000000]                  mov ax, [a]
    20 00000006 66F7E0                          mul word ax         ; dx:ax = a*a
    21 00000009 6689D3                          mov bx, dx  
    22 0000000C C1E310                          shl ebx, 2 * 8  
    23 0000000F 6689C3                          mov bx, ax          ; ebx = a*a
    24                                              
    25 00000012 B800000000                      mov eax, 0  
    26 00000017 A0[02000000]                    mov al, [b] 
    27 0000001C 66BA0000                        mov dx, 0   
    28 00000020 66F735[03000000]                div word [c]        ; ax = b/c
    29 00000027 01D8                            add eax, ebx        ; eax = a*a+b/c
    30 00000029 83E801                          sub eax, 1          ; eax = a*a+b/c-1
    31                                              
    32 0000002C 6689C3                          mov bx, ax  
    33 0000002F C1E810                          shr eax, 2 * 8  
    34 00000032 6689C2                          mov dx, ax  
    35 00000035 6689D8                          mov ax, bx          ; dx:ax = a*a+b/c-1
    36                                              
    37 00000038 8A1D[02000000]                  mov bl, [b] 
    38 0000003E B700                            mov bh, 0   
    39 00000040 66031D[03000000]                add bx, [c]         ; bx = b+c
    40                                              
    41 00000047 66F7F3                          div word bx         ; ax = (a*a+b/c-1)/(b+c)
    42 0000004A 6689C3                          mov bx, ax  
    43 0000004D B800000000                      mov eax, 0  
    44 00000052 6689D8                          mov ax, bx          ; eax = (a*a+b/c-1)/(b+c)
    45 00000055 0305[05000000]                  add eax, [d]        ; eax = (a*a+b/c-1)/(b+c)+d
    46                                          
    47 0000005B BA00000000                      mov edx, 0
    48 00000060 2B05[09000000]                  sub eax, dword[x]
    49 00000066 1B15[0D000000]                  sbb edx, dword[x+4] ; edx:eax = (a*a+b/c-1)/(b+c)+d-x
    50                                          
    51 0000006C A3[11000000]                    mov dword [r], eax
    52 00000071 8915[15000000]                  mov dword [r+4], edx    ; r = (a*a+b/c-1)/(b+c)+d-x = (1*1+2/3-1)/(2+3)+4-5 = -1 = FF FF FF FF FF FF FF FFh
    53                                          
    54                                          ; exit(0)
    55 00000077 6A00                            push dword 0
    56 00000079 FF15[00000000]                  call [exit]
