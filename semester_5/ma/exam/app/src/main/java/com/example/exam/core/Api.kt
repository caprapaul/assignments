package com.ilazar.myapp2.coreimport com.google.gson.GsonBuilderimport okhttp3.OkHttpClientimport retrofit2.Retrofitimport retrofit2.converter.gson.GsonConverterFactoryimport java.lang.Exceptionimport java.lang.RuntimeExceptionimport java.security.SecureRandomimport java.security.cert.CertificateExceptionimport java.security.cert.X509Certificateimport javax.net.ssl.SSLContextimport javax.net.ssl.SSLSocketFactoryimport javax.net.ssl.TrustManagerimport javax.net.ssl.X509TrustManagerobject Api {    private const val URL = "https://192.168.204.1:5001/"    val tokenInterceptor = TokenInterceptor()    private val client: OkHttpClient = getUnsafeOkHttpClient()    private var gson = GsonBuilder()        .setLenient()        .create()    val retrofit: Retrofit = Retrofit.Builder()        .baseUrl(URL)        .addConverterFactory(GsonConverterFactory.create(gson))        .client(client)        .build()    private fun getUnsafeOkHttpClient(): OkHttpClient {        return try {            // Create a trust manager that does not validate certificate chains            val trustAllCerts: Array<TrustManager> = arrayOf<TrustManager>(object :                X509TrustManager {                @Throws(CertificateException::class)                override fun checkClientTrusted(                    chain: Array<X509Certificate?>?,                    authType: String?                ) {                }                @Throws(CertificateException::class)                override fun checkServerTrusted(                    chain: Array<X509Certificate?>?,                    authType: String?                ) {                }                override fun getAcceptedIssuers(): Array<X509Certificate> {                    return arrayOf()                }            })            // Install the all-trusting trust manager            val sslContext: SSLContext = SSLContext.getInstance("SSL")            sslContext.init(null, trustAllCerts, SecureRandom())            // Create an ssl socket factory with our all-trusting manager            val sslSocketFactory: SSLSocketFactory = sslContext.socketFactory            val builder = OkHttpClient.Builder()            builder.sslSocketFactory(sslSocketFactory, trustAllCerts[0] as X509TrustManager)            builder.hostnameVerifier { _, _ -> true }            builder.apply { this.addInterceptor(tokenInterceptor) }            builder.build()        } catch (e: Exception) {            throw RuntimeException(e)        }    }}